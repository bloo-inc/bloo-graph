let http,express,ApolloServer,jwt,db,config,env,typeDefs,resolvers,log;_15f‍.w("http",[["default",["http"],function(v){http=v}]]);_15f‍.w("express",[["default",["express"],function(v){express=v}]]);_15f‍.w("apollo-server-express",[["ApolloServer",["ApolloServer"],function(v){ApolloServer=v}]]);_15f‍.w("jsonwebtoken",[["default",["jwt"],function(v){jwt=v}]]);_15f‍.w("./models",[["db",["db"],function(v){db=v}]]);_15f‍.w("./conf/config.js",[["config",["config"],function(v){config=v}],["env",["env"],function(v){env=v}]]);_15f‍.w("./conf/schema",[["typeDefs",["typeDefs"],function(v){typeDefs=v}]]);_15f‍.w("./conf/resolvers",[["resolvers",["resolvers"],function(v){resolvers=v}]]);_15f‍.w("./utils/utils.js",[["log",["log"],function(v){log=v}]]);












log.info('Running in ' + config.env + ' mode.');

const server = new ApolloServer({
  typeDefs,
  resolvers,
  context: async ({ req }) => {
   let token = req.headers.authorization || null;

   let user = null;
   let err = null;

   if (token !== null) {
     token = token.substring(7);
     try {
       let payload = jwt.verify(token, Buffer.from(env.JWT_SECRET, 'base64'));
       let uuid = payload.uuid || null;
       if (uuid != null) {
         user = await db.User.findByPk(uuid);
       }
     } catch (errMsg) {
       err = errMsg;
     }
   }

   return { log, user, db, err };
 },
 playground: false,
 debug: (config.env === 'development')
})


app.get('/', function (req, res) {
  res.send('hello world')
})

const app = express();
server.applyMiddleware({ app, path:config.graphPath });


app.listen({
  port: config.graphPort
},() => {
  log.info('GraphQL API initiated.');
});
